name: Deploy AI Model to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build and Deploy to ECS
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-north-1
      ECR_REPO: my-llm-api-repo
      ECS_CLUSTER: llm-cluster
      ECS_SERVICE: llm-service        # Only needed if you a service
      CONTAINER_NAME: llm-api-container
      TASK_NAME: llm-task             # Matches Terraform's task definition family

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin \
            $(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build, tag, and push Docker image to ECR
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          ECR_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO
          IMAGE_TAG=$ECR_URI:$COMMIT_HASH

          docker build -f docker/Dockerfile -t $IMAGE_TAG ./api
          docker push $IMAGE_TAG

          echo "IMAGE_URI=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Render ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
